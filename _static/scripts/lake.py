#!/usr/bin/env python
#
##############################################################################
#
# MODULE:       model
#
# AUTHOR(S):    landa
#
# PURPOSE:      Script generated by wxGUI Graphical Modeler.
#
# DATE:         Mon Jul  4 18:02:51 2016
#
##############################################################################

#%module
#% description: Performs flooding simulation.
#%end

#%option 
#% key: start_level
#% description: Start water level in meters
#% required: yes
#% answer: 990
#% type: integer
#% end
#%option 
#% key: end_level
#% description: End water level in meters
#% required: yes
#% answer: 995
#% type: integer
#% end
#%option 
#% key: step
#% description: Level step
#% required: yes
#% answer: 1
#% type: integer
#% end

import sys
import os
import atexit

from grass.script import parser, run_command, message

def cleanup():
    pass

def main():
    start_level = int(options['start_level'])
    end_level = int(options['end_level'])
    step = int(options['step'])

    for level in range(start_level, end_level+1, step):
        message("Computing water level: {}".format(level))
        compute(level)

def compute(level):
    run_command("r.lake",
                overwrite = True,
                quiet = True,
                elevation = "dem37",
                water_level = level,
                lake = 'lake_{}'.format(level),
                coordinates = '531963.147664,5626869.62523')

    run_command("r.report",
                flags = 'hn',
                overwrite = True,
                map = 'lake_{}'.format(level),
                units = "h",
                null_value = "*",
                page_length = 0,
                page_width = 79,
                nsteps = 1)

    run_command("r.mapcalc",
                overwrite = True,
                expression = "lake_mask = if ( lake_{}, 1, null() )".format(level))

    run_command("r.to.vect",
                flags = 'vt',
                overwrite = True,
                quiet = True,
                input = "lake_mask",
                output = 'lake_{}'.format(level),
                type = "area",
                column = "value")

    run_command("v.overlay",
                flags = 't',
                overwrite = True,
                quiet = True,
                ainput = "Cesta",
                alayer = "1",
                atype = "auto",
                binput = 'lake_{}'.format(level),
                blayer = "1",
                btype = "area",
                operator = "and",
                output = 'road_lake_{}'.format(level),
                olayer = "1,0,0",
                snap = 1e-8)

    run_command("v.to.db",
                flags = 'pc',
                quiet = True,
                map = 'road_lake_{}'.format(level),
                layer = "1",
                type = "point,line,boundary,centroid",
                option = "length",
                columns = "dummy",
                query_layer = "1",
                separator = "pipe")


    return 0

if __name__ == "__main__":
    options, flags = parser()
    atexit.register(cleanup)
    sys.exit(main())
